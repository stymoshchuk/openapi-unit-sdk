/*
 * Unit OpenAPI specifications
 * An OpenAPI specifications for unit-sdk clients
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreditAccountRepaymentInformationResponseDataAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-21T15:27:39.020654+02:00[Europe/Zurich]")
public class CreditAccountRepaymentInformationResponseDataAttributes {
  public static final String SERIALIZED_NAME_REMAINING_AMOUNT_DUE = "remainingAmountDue";
  @SerializedName(SERIALIZED_NAME_REMAINING_AMOUNT_DUE)
  private Integer remainingAmountDue;

  public static final String SERIALIZED_NAME_REMAINING_AMOUNT_OVERDUE = "remainingAmountOverdue";
  @SerializedName(SERIALIZED_NAME_REMAINING_AMOUNT_OVERDUE)
  private Integer remainingAmountOverdue;

  public static final String SERIALIZED_NAME_INITIATED_REPAYMENTS = "initiatedRepayments";
  @SerializedName(SERIALIZED_NAME_INITIATED_REPAYMENTS)
  private Integer initiatedRepayments;

  public static final String SERIALIZED_NAME_STATEMENT_PERIOD_START = "statementPeriodStart";
  @SerializedName(SERIALIZED_NAME_STATEMENT_PERIOD_START)
  private LocalDate statementPeriodStart;

  public static final String SERIALIZED_NAME_STATEMENT_PERIOD_END = "statementPeriodEnd";
  @SerializedName(SERIALIZED_NAME_STATEMENT_PERIOD_END)
  private LocalDate statementPeriodEnd;

  public static final String SERIALIZED_NAME_NEXT_REPAYMENT_DUE_DATE = "nextRepaymentDueDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REPAYMENT_DUE_DATE)
  private LocalDate nextRepaymentDueDate;

  public CreditAccountRepaymentInformationResponseDataAttributes() {
  }

  public CreditAccountRepaymentInformationResponseDataAttributes remainingAmountDue(Integer remainingAmountDue) {
    
    this.remainingAmountDue = remainingAmountDue;
    return this;
  }

   /**
   * Get remainingAmountDue
   * @return remainingAmountDue
  **/
  @javax.annotation.Nonnull
  public Integer getRemainingAmountDue() {
    return remainingAmountDue;
  }


  public void setRemainingAmountDue(Integer remainingAmountDue) {
    this.remainingAmountDue = remainingAmountDue;
  }


  public CreditAccountRepaymentInformationResponseDataAttributes remainingAmountOverdue(Integer remainingAmountOverdue) {
    
    this.remainingAmountOverdue = remainingAmountOverdue;
    return this;
  }

   /**
   * Get remainingAmountOverdue
   * @return remainingAmountOverdue
  **/
  @javax.annotation.Nonnull
  public Integer getRemainingAmountOverdue() {
    return remainingAmountOverdue;
  }


  public void setRemainingAmountOverdue(Integer remainingAmountOverdue) {
    this.remainingAmountOverdue = remainingAmountOverdue;
  }


  public CreditAccountRepaymentInformationResponseDataAttributes initiatedRepayments(Integer initiatedRepayments) {
    
    this.initiatedRepayments = initiatedRepayments;
    return this;
  }

   /**
   * Get initiatedRepayments
   * @return initiatedRepayments
  **/
  @javax.annotation.Nonnull
  public Integer getInitiatedRepayments() {
    return initiatedRepayments;
  }


  public void setInitiatedRepayments(Integer initiatedRepayments) {
    this.initiatedRepayments = initiatedRepayments;
  }


  public CreditAccountRepaymentInformationResponseDataAttributes statementPeriodStart(LocalDate statementPeriodStart) {
    
    this.statementPeriodStart = statementPeriodStart;
    return this;
  }

   /**
   * Get statementPeriodStart
   * @return statementPeriodStart
  **/
  @javax.annotation.Nonnull
  public LocalDate getStatementPeriodStart() {
    return statementPeriodStart;
  }


  public void setStatementPeriodStart(LocalDate statementPeriodStart) {
    this.statementPeriodStart = statementPeriodStart;
  }


  public CreditAccountRepaymentInformationResponseDataAttributes statementPeriodEnd(LocalDate statementPeriodEnd) {
    
    this.statementPeriodEnd = statementPeriodEnd;
    return this;
  }

   /**
   * Get statementPeriodEnd
   * @return statementPeriodEnd
  **/
  @javax.annotation.Nonnull
  public LocalDate getStatementPeriodEnd() {
    return statementPeriodEnd;
  }


  public void setStatementPeriodEnd(LocalDate statementPeriodEnd) {
    this.statementPeriodEnd = statementPeriodEnd;
  }


  public CreditAccountRepaymentInformationResponseDataAttributes nextRepaymentDueDate(LocalDate nextRepaymentDueDate) {
    
    this.nextRepaymentDueDate = nextRepaymentDueDate;
    return this;
  }

   /**
   * Get nextRepaymentDueDate
   * @return nextRepaymentDueDate
  **/
  @javax.annotation.Nonnull
  public LocalDate getNextRepaymentDueDate() {
    return nextRepaymentDueDate;
  }


  public void setNextRepaymentDueDate(LocalDate nextRepaymentDueDate) {
    this.nextRepaymentDueDate = nextRepaymentDueDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditAccountRepaymentInformationResponseDataAttributes creditAccountRepaymentInformationResponseDataAttributes = (CreditAccountRepaymentInformationResponseDataAttributes) o;
    return Objects.equals(this.remainingAmountDue, creditAccountRepaymentInformationResponseDataAttributes.remainingAmountDue) &&
        Objects.equals(this.remainingAmountOverdue, creditAccountRepaymentInformationResponseDataAttributes.remainingAmountOverdue) &&
        Objects.equals(this.initiatedRepayments, creditAccountRepaymentInformationResponseDataAttributes.initiatedRepayments) &&
        Objects.equals(this.statementPeriodStart, creditAccountRepaymentInformationResponseDataAttributes.statementPeriodStart) &&
        Objects.equals(this.statementPeriodEnd, creditAccountRepaymentInformationResponseDataAttributes.statementPeriodEnd) &&
        Objects.equals(this.nextRepaymentDueDate, creditAccountRepaymentInformationResponseDataAttributes.nextRepaymentDueDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remainingAmountDue, remainingAmountOverdue, initiatedRepayments, statementPeriodStart, statementPeriodEnd, nextRepaymentDueDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditAccountRepaymentInformationResponseDataAttributes {\n");
    sb.append("    remainingAmountDue: ").append(toIndentedString(remainingAmountDue)).append("\n");
    sb.append("    remainingAmountOverdue: ").append(toIndentedString(remainingAmountOverdue)).append("\n");
    sb.append("    initiatedRepayments: ").append(toIndentedString(initiatedRepayments)).append("\n");
    sb.append("    statementPeriodStart: ").append(toIndentedString(statementPeriodStart)).append("\n");
    sb.append("    statementPeriodEnd: ").append(toIndentedString(statementPeriodEnd)).append("\n");
    sb.append("    nextRepaymentDueDate: ").append(toIndentedString(nextRepaymentDueDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("remainingAmountDue");
    openapiFields.add("remainingAmountOverdue");
    openapiFields.add("initiatedRepayments");
    openapiFields.add("statementPeriodStart");
    openapiFields.add("statementPeriodEnd");
    openapiFields.add("nextRepaymentDueDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("remainingAmountDue");
    openapiRequiredFields.add("remainingAmountOverdue");
    openapiRequiredFields.add("initiatedRepayments");
    openapiRequiredFields.add("statementPeriodStart");
    openapiRequiredFields.add("statementPeriodEnd");
    openapiRequiredFields.add("nextRepaymentDueDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreditAccountRepaymentInformationResponseDataAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditAccountRepaymentInformationResponseDataAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditAccountRepaymentInformationResponseDataAttributes is not found in the empty JSON string", CreditAccountRepaymentInformationResponseDataAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreditAccountRepaymentInformationResponseDataAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditAccountRepaymentInformationResponseDataAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditAccountRepaymentInformationResponseDataAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditAccountRepaymentInformationResponseDataAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditAccountRepaymentInformationResponseDataAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditAccountRepaymentInformationResponseDataAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditAccountRepaymentInformationResponseDataAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditAccountRepaymentInformationResponseDataAttributes>() {
           @Override
           public void write(JsonWriter out, CreditAccountRepaymentInformationResponseDataAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditAccountRepaymentInformationResponseDataAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreditAccountRepaymentInformationResponseDataAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreditAccountRepaymentInformationResponseDataAttributes
  * @throws IOException if the JSON string is invalid with respect to CreditAccountRepaymentInformationResponseDataAttributes
  */
  public static CreditAccountRepaymentInformationResponseDataAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditAccountRepaymentInformationResponseDataAttributes.class);
  }

 /**
  * Convert an instance of CreditAccountRepaymentInformationResponseDataAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

